desc:Airwindows PurestAir (Mark Heath)

// https://github.com/airwindows/airwindows/blob/master/plugins/WinVST/PurestAir/PurestAirProc.cpp
// original code Copyright (c) 2016 airwindows, All rights reserved
// license: MIT
// version history:
// 0.1 2 May 2022 - initial port from GitHub commit 558b93e


//tags: eq
//author: Mark Heath

// https://www.airwindows.com/purestair/

// default<min, max, increment>
slider1:0.5<0,1,0.01>Boost
slider2:0.0<0,1,0.01>Limit
slider3:1.0<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

A = 0.5;
B = 0.0;
C = 1.0;

last1SampleL = 0.0;
halfwaySampleL = halfDrySampleL = halfDiffSampleL = diffSampleL = 0.0;
lastSampleL = 0.0;
s1L = s2L = s3L = 0.0;
applyL = 0.0;
last1SampleR = 0.0;
halfwaySampleR = halfDrySampleR = halfDiffSampleR = diffSampleR = 0.0;
lastSampleR = 0.0;
s1R = s2R = s3R = 0.0;
applyR = 0.0;

const1 = 1.18*10^-23; // 1.18e-23;
const2 = 1.18*10^-17; // 1.18e-17
const3 = 1.18*10^-37;
M_PI = 3.1415926535897932384626433;
UINT32_MAX = 4294967295;

// fpdL and fpdR are uint32_t
fpdL = 1.0; while (fpdL = rand()*UINT32_MAX; fpdL < 16386; );
fpdR = 1.0; while (fpdR = rand()*UINT32_MAX; fpdR < 16386; );
fpdL |= 0;
fpdR |= 0;
//this is reset: values being initialized only once. Startup values, whatever they are.

@slider
A = slider1;
B = slider2;
C = slider3;

@block
applyTarget = (A*2.0)-1.0;
threshold = pow((1-abs(applyTarget)),3);
(applyTarget > 0) ? applyTarget *= 3;

intensity = pow(B,2)*5.0;
wet = C;


@sample

inputSampleL = spl0;
inputSampleR = spl1;
(abs(inputSampleL)<const1) ? inputSampleL = fpdL * const2;
(abs(inputSampleR)<const1) ? inputSampleR = fpdR * const2;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

halfDrySampleL = halfwaySampleL = (inputSampleL + last1SampleL) / 2.0;
last1SampleL = inputSampleL;
s3L = s2L;
s2L = s1L;
s1L = inputSampleL;
m1 = (s1L-s2L)*((s1L-s2L)/1.3);
m2 = (s2L-s3L)*((s1L-s2L)/1.3);
sense = abs((m1-m2)*((m1-m2)/1.3))*intensity;
//this will be 0 for smooth, high for SSS
applyL += applyTarget - sense;
applyL *= 0.5;
(applyL < -1.0) ? applyL = -1.0;

clamp = halfwaySampleL - halfDrySampleL;
(clamp > threshold) ? halfwaySampleL = lastSampleL + threshold;
(-clamp > threshold) ? halfwaySampleL = lastSampleL - threshold;
lastSampleL = halfwaySampleL;

clamp = inputSampleL - lastSampleL;
(clamp > threshold) ? inputSampleL = lastSampleL + threshold;
(-clamp > threshold) ? inputSampleL = lastSampleL - threshold;
lastSampleL = inputSampleL;

diffSampleL = spl0 - inputSampleL;
halfDiffSampleL = halfDrySampleL - halfwaySampleL;

inputSampleL = spl0 + ((diffSampleL + halfDiffSampleL)*applyL);
//done with left channel

halfDrySampleR = halfwaySampleR = (inputSampleR + last1SampleR) / 2.0;
last1SampleR = inputSampleR;
s3R = s2R;
s2R = s1R;
s1R = inputSampleR;
m1 = (s1R-s2R)*((s1R-s2R)/1.3);
m2 = (s2R-s3R)*((s1R-s2R)/1.3);
sense = abs((m1-m2)*((m1-m2)/1.3))*intensity;
//this will be 0 for smooth, high for SSS
applyR += applyTarget - sense;
applyR *= 0.5;
(applyR < -1.0) ? applyR = -1.0;

clamp = halfwaySampleR - halfDrySampleR;
(clamp > threshold) ? halfwaySampleR = lastSampleR + threshold;
(-clamp > threshold) ? halfwaySampleR = lastSampleR - threshold;
lastSampleR = halfwaySampleR;

clamp = inputSampleR - lastSampleR;
(clamp > threshold) ? inputSampleR = lastSampleR + threshold;
(-clamp > threshold) ? inputSampleR = lastSampleR - threshold;
lastSampleR = inputSampleR;

diffSampleR = spl1 - inputSampleR;
halfDiffSampleR = halfDrySampleR - halfwaySampleR;

inputSampleR = spl1 + ((diffSampleR + halfDiffSampleR)*applyR);
//done with right channel

(wet !=1.0) ? (
  inputSampleL = (inputSampleL * wet) + (drySampleL * (1.0-wet));
  inputSampleR = (inputSampleR * wet) + (drySampleR * (1.0-wet));
);

//begin 64 bit stereo floating point dither
//int expon; frexp((double)inputSampleL, &expon);
fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
//inputSampleL += ((double(fpdL)-uint32_t(0x7fffffff)) * 1.1e-44l * pow(2,expon+62));
//frexp((double)inputSampleR, &expon);
fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
//inputSampleR += ((double(fpdR)-uint32_t(0x7fffffff)) * 1.1e-44l * pow(2,expon+62));
//end 64 bit stereo floating point dither
(fpdL < 0) ? fpdL = 0x80000000 + (fpdL & 0x7FFFFFFF);
(fpdR < 0) ? fpdR = 0x80000000 + (fpdR & 0x7FFFFFFF);

spl0 = inputSampleL;
spl1 = inputSampleR;

