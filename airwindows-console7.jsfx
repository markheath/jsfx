desc:Airwindows Console7 (Mark Heath)

// https://github.com/airwindows/airwindows/blob/master/plugins/WinVST/Console7Channel/Console7ChannelProc.cpp
// original code Copyright (c) 2016 airwindows, All rights reserved
// license: MIT
// version history:
// 0.1 2 May 2022 - initial port from GitHub commit 558b93e

//tags: saturation
//author: Mark Heath

// https://www.airwindows.com/console7/

// default<min, max, increment>
slider1:0.772<0,1,0.01>Fader

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

A = 0.772;
gainchase = -1.0;
chasespeed = 64.0;
freemem = 0;
biquadA = freemem; freemem+=15;
x = 0; loop(15, biquadA[x] = 0.0; x += 1; );

const1 = 1.18*10^-23; // 1.18e-23;
const2 = 1.18*10^-17; // 1.18e-17
const3 = 1.18*10^-37;
M_PI = 3.1415926535897932384626433;
UINT32_MAX = 4294967295;

// fpdL and fpdR are uint32_t
fpdL = 1.0; while (fpdL = rand()*UINT32_MAX; fpdL < 16386; );
fpdR = 1.0; while (fpdR = rand()*UINT32_MAX; fpdR < 16386; );
fpdL |= 0;
fpdR |= 0;
//this is reset: values being initialized only once. Startup values, whatever they are.

@slider
A = slider1;

@block
inputgain = A*1.272019649514069;
//which is, in fact, the square root of 1.618033988749894848204586...
//this happens to give us a boost factor where the track continues to get louder even
//as it saturates and loses a bit of peak energy. Console7Channel channels go to 12! (.272,etc)
//Neutral gain through the whole system with a full scale sine ia 0.772 on the gain knob
(gainchase != inputgain) ? chasespeed *= 2.0;
(chasespeed > sampleFrames) ? chasespeed = sampleFrames;
(gainchase < 0.0) ? gainchase = inputgain;

biquadA[0] = 20000.0 / srate;
biquadA[1] = 1.618033988749894848204586;

K = tan(M_PI * biquadA[0]); //lowpass
norm = 1.0 / (1.0 + K / biquadA[1] + K * K);
biquadA[2] = K * K * norm;
biquadA[3] = 2.0 * biquadA[2];
biquadA[4] = biquadA[2];
biquadA[5] = 2.0 * (K * K - 1.0) * norm;
biquadA[6] = (1.0 - K / biquadA[1] + K * K) * norm;


@sample

inputSampleL = spl0;
inputSampleR = spl1;
(abs(inputSampleL)<const1) ? inputSampleL = fpdL * const2;
(abs(inputSampleR)<const1) ? inputSampleR = fpdR * const2;

outSampleL = biquadA[2]*inputSampleL+biquadA[3]*biquadA[7]+biquadA[4]*biquadA[8]-biquadA[5]*biquadA[9]-biquadA[6]*biquadA[10];
biquadA[8] = biquadA[7]; biquadA[7] = inputSampleL; inputSampleL = outSampleL; biquadA[10] = biquadA[9]; biquadA[9] = inputSampleL; //DF1 left
    
outSampleR = biquadA[2]*inputSampleR+biquadA[3]*biquadA[11]+biquadA[4]*biquadA[12]-biquadA[5]*biquadA[13]-biquadA[6]*biquadA[14];
biquadA[12] = biquadA[11]; biquadA[11] = inputSampleR; inputSampleR = outSampleR; biquadA[14] = biquadA[13]; biquadA[13] = inputSampleR; //DF1 right
    
chasespeed *= 0.9999; chasespeed -= 0.01; (chasespeed < 64.0) ? chasespeed = 64.0;
//we have our chase speed compensated for recent fader activity
gainchase = (((gainchase*chasespeed)+inputgain)/(chasespeed+1.0));
//gainchase is chasing the target, as a simple multiply gain factor
(1.0 != gainchase) ? (inputSampleL *= pow(gainchase,3); inputSampleR *= pow(gainchase,3););
//this trim control cuts back extra hard because we will amplify after the distortion
//that will shift the distortion/antidistortion curve, in order to make faded settings
//slightly 'expanded' and fall back in the soundstage, subtly

(inputSampleL > 1.097) ? inputSampleL = 1.097;
(inputSampleL < -1.097) ? inputSampleL = -1.097;
inputSampleL = ((sin(inputSampleL*abs(inputSampleL))/((abs(inputSampleL) == 0.0) ?1:abs(inputSampleL)))*0.8)+(sin(inputSampleL)*0.2);
(inputSampleR > 1.097) ? inputSampleR = 1.097;
(inputSampleR < -1.097) ? inputSampleR = -1.097;
inputSampleR = ((sin(inputSampleR*abs(inputSampleR))/((abs(inputSampleR) == 0.0) ?1:abs(inputSampleR)))*0.8)+(sin(inputSampleR)*0.2);
//this is a version of Spiral blended 80/20 with regular Density ConsoleChannel.
//It's blending between two different harmonics in the overtones of the algorithm
    
(1.0 != gainchase && 0.0 != gainchase) ? (inputSampleL /= gainchase; inputSampleR /= gainchase;);
//we re-amplify after the distortion relative to how much we cut back previously.

//begin 64 bit stereo floating point dither
//int expon; frexp((double)inputSampleL, &expon);
fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
//inputSampleL += ((double(fpdL)-uint32_t(0x7fffffff)) * 1.1e-44l * pow(2,expon+62));
//frexp((double)inputSampleR, &expon);
fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
//inputSampleR += ((double(fpdR)-uint32_t(0x7fffffff)) * 1.1e-44l * pow(2,expon+62));
//end 64 bit stereo floating point dither
(fpdL < 0) ? fpdL = 0x80000000 + (fpdL & 0x7FFFFFFF);
(fpdR < 0) ? fpdR = 0x80000000 + (fpdR & 0x7FFFFFFF);

spl0 = inputSampleL;
spl1 = inputSampleR;

