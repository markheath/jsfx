desc:Airwindows PurestGain (Mark Heath)

// https://github.com/airwindows/airwindows/blob/master/plugins/WinVST/PurestGain/PurestGainProc.cpp
// original code Copyright (c) 2016 airwindows, All rights reserved
// license: MIT
// version history:
// 0.1 2 May 2022 - initial port from GitHub commit 558b93e


//tags: gain
//author: Mark Heath

// https://www.airwindows.com/purestgain/

// default<min, max, increment>
slider1:0.5<0,1,0.01>Gain
slider2:1.0<0,1,0.01>Slow Fade

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

A = 0.5;
B = 1.0;
gainchase = -90.0;
settingchase = -90.0;
gainBchase = -90.0;
chasespeed = 350.0;

const1 = 1.18*10^-23; // 1.18e-23;
const2 = 1.18*10^-17; // 1.18e-17
const3 = 1.18*10^-37;
M_PI = 3.1415926535897932384626433;
UINT32_MAX = 4294967295;

// fpdL and fpdR are uint32_t
fpdL = 1.0; while (fpdL = rand()*UINT32_MAX; fpdL < 16386; );
fpdR = 1.0; while (fpdR = rand()*UINT32_MAX; fpdR < 16386; );
fpdL |= 0;
fpdR |= 0;
//this is reset: values being initialized only once. Startup values, whatever they are.

@slider
A = slider1;
B = slider2;

@block

inputgain = (A * 80.0)-40.0;
(settingchase != inputgain) ? (
  chasespeed *= 2.0;
  settingchase = inputgain;
  //increment the slowness for each fader movement
  //continuous alteration makes it react smoother
  //sudden jump to setting, not so much
);
(chasespeed > 2500.0) ? chasespeed = 2500.0;
//bail out if it's too extreme
(gainchase < -60.0) ? (
  gainchase = pow(10.0,inputgain/20.0);
  //shouldn't even be a negative number
  //this is about starting at whatever's set, when
  //plugin is instantiated.
  //Otherwise it's the target, in dB.
);
//done with top controller
targetBgain = B;
(gainBchase < 0.0) ? gainBchase = targetBgain;

//A is 0-1 (you can't feed other values to VST hosts, it's always 0-1 internally)
//B is 0-1 and you need to multiply it by 100 if you want to use the 'percent'
//C is 0-1 and if you can use a 0-1 value you can use it directly
//D is 0-1 and you must set global parameters in PurestGain.SetParameter() to use it as a 'popup'
//assign values here, possibly using const values as they won't change in this context


@sample

targetgain = pow(10.0,settingchase/20.0);
//now we have the target in our temp variable

chasespeed *= 0.9999;
chasespeed -= 0.01;
(chasespeed < 350.0) ? chasespeed = 350.0;
//we have our chase speed compensated for recent fader activity

gainchase = (((gainchase*chasespeed)+targetgain)/(chasespeed+1.0));
//gainchase is chasing the target, as a simple multiply gain factor

gainBchase = (((gainBchase*4000)+targetBgain)/4001);
//gainchase is chasing the target, as a simple multiply gain factor

outputgain = gainchase * gainBchase;
//directly multiply the dB gain by the straight multiply gain

inputSampleL = spl0;
inputSampleR = spl1;
(abs(inputSampleL)<const1) ? inputSampleL = fpdL * const2;
(abs(inputSampleR)<const1) ? inputSampleR = fpdR * const2;

(1.0 == outputgain) ?
(
  spl0 = spl0;
  spl1 = spl1;
  // nothing to do - leave spl0 unmodified
) : (
  inputSampleL *= outputgain;
  inputSampleR *= outputgain;
  
  //begin 64 bit stereo floating point dither
  //int expon; frexp((double)inputSampleL, &expon);
  fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
  //inputSampleL += ((double(fpdL)-uint32_t(0x7fffffff)) * 1.1e-44l * pow(2,expon+62));
  //frexp((double)inputSampleR, &expon);
  fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
  //inputSampleR += ((double(fpdR)-uint32_t(0x7fffffff)) * 1.1e-44l * pow(2,expon+62));
  //end 64 bit stereo floating point dither
  (fpdL < 0) ? fpdL = 0x80000000 + (fpdL & 0x7FFFFFFF);
  (fpdR < 0) ? fpdR = 0x80000000 + (fpdR & 0x7FFFFFFF);
  
  spl0 = inputSampleL;
  spl1 = inputSampleR;
);

