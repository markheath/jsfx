desc:Airwindows Verbity (Mark Heath)

// https://github.com/airwindows/airwindows/blob/master/plugins/WinVST/Verbity/VerbityProc.cpp
// original code Copyright (c) 2016 airwindows, All rights reserved
// license: MIT
// version history:
// 0.1 30 Apr 2022 - initial port from GitHub commit 558b93e
// 0.2 6 May 2022 - improved bit shifting for random number
// 0.3 7 May 2022 - correct init code order

//tags: reverb
//author: Mark Heath

// https://www.airwindows.com/verbity/

// default<min, max, increment>
slider1:0.25<0,1,0.01>Bigness
slider2:0.25<0,1,0.01>Longness
slider3:0.0<0,1,0.01>Darkness
slider4:0.25<0,1,0.01>Wetness

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

A = 0.25;
B = 0.0;
C = 0.25;
D = 0.25;

iirAL = 0.0; iirAR = 0.0;
iirBL = 0.0; iirBR = 0.0;


feedbackAL = 0.0; feedbackAR = 0.0;
feedbackBL = 0.0; feedbackBR = 0.0;
feedbackCL = 0.0; feedbackCR = 0.0;
feedbackDL = 0.0; feedbackDR = 0.0;
previousAL = 0.0; previousAR = 0.0;
previousBL = 0.0; previousBR = 0.0;
previousCL = 0.0; previousCR = 0.0;
previousDL = 0.0; previousDR = 0.0;

thunderL = 0; thunderR = 0;

countI = 1;
countJ = 1;
countK = 1;
countL = 1;

countA = 1;
countB = 1;
countC = 1;
countD = 1;  

countE = 1;
countF = 1;
countG = 1;
countH = 1;
cycle = 0;

freemem = 0;
aIL = freemem; freemem+=6480;
aJL = freemem; freemem+=3660;
aKL = freemem; freemem+=1720;
aLL = freemem; freemem+=680;
  
aAL = freemem; freemem+=9700;
aBL = freemem; freemem+=6000;
aCL = freemem; freemem+=2320;
aDL = freemem; freemem+=940;
  
aEL = freemem; freemem+=15220;
aFL = freemem; freemem+=8460;
aGL = freemem; freemem+=4540;
aHL = freemem; freemem+=3200;
  
lastRefL = freemem; freemem+=7;
  
aIR = freemem; freemem+=6480;
aJR = freemem; freemem+=3660;
aKR = freemem; freemem+=1720;
aLR = freemem; freemem+=680;
  
aAR = freemem; freemem+=9700;
aBR = freemem; freemem+=6000;
aCR = freemem; freemem+=2320;
aDR = freemem; freemem+=940;
  
aER = freemem; freemem+=15220;
aFR = freemem; freemem+=8460;
aGR = freemem; freemem+=4540;
aHR = freemem; freemem+=3200;

lastRefR = freemem; freemem+=7;

count = 0; loop(6, lastRefL[count] = 0.0;lastRefR[count] = 0.0; count+=1 );

count = 0; loop(6479, aIL[count] = 0.0;aIR[count] = 0.0;count+=1; );
count = 0; loop(3659, aJL[count] = 0.0;aJR[count] = 0.0;count+=1; );
count = 0; loop(1719, aKL[count] = 0.0;aKR[count] = 0.0;count+=1; );
count = 0; loop(679, aLL[count] = 0.0;aLR[count] = 0.0;count+=1; );

count = 0; loop(9699, aAL[count] = 0.0;aAR[count] = 0.0;count+=1; );
count = 0; loop(5999, aBL[count] = 0.0;aBR[count] = 0.0;count+=1; );
count = 0; loop(2319, aCL[count] = 0.0;aCR[count] = 0.0;count+=1; );
count = 0; loop(939, aDL[count] = 0.0;aDR[count] = 0.0;count+=1; );

count = 0; loop(15219, aEL[count] = 0.0;aER[count] = 0.0;count+=1; );
count = 0; loop(8459, aFL[count] = 0.0;aFR[count] = 0.0;count+=1; );
count = 0; loop(4539, aGL[count] = 0.0;aGR[count] = 0.0;count+=1; );
count = 0; loop(3199, aHL[count] = 0.0;aHR[count] = 0.0;count+=1; );


const1 = 1.18*10^-23; // 1.18e-23;
const2 = 1.18*10^-17; // 1.18e-17
const3 = 1.18*10^-37;
M_PI = 3.1415926535897932384626433;
UINT32_MAX = 4294967295;


// fpdL and fpdR are uint32_t
fpdL = 1.0; while (fpdL = rand()*UINT32_MAX; fpdL < 16386; );
fpdR = 1.0; while (fpdR = rand()*UINT32_MAX; fpdR < 16386; );
fpdL |= 0;
fpdR |= 0;
//this is reset: values being initialized only once. Startup values, whatever they are.

@slider
A = slider1;
B = slider2;
C = slider3;
D = slider4;
// argument list

@block
cycleEnd = floor(overallscale);
(cycleEnd < 1) ? cycleEnd = 1;
(cycleEnd > 4) ? cycleEnd = 4;
//this is going to be 2 for 88.1 or 96k, 3 for silly people, 4 for 176 or 192k
(cycle > cycleEnd-1) ? cycle = cycleEnd-1; //sanity check
  
size = (A*1.77)+0.1;
regen = 0.0625+(B*0.03125); //0.09375 max;
lowpass = (1.0-pow(C,2.0))/sqrt(overallscale);
interpolate = pow(C,2.0)*0.618033988749894848204586; //has IIRlike qualities
thunderAmount = (0.3-(B*0.22))*C*0.1;
wet = D*2.0;
dry = 2.0 - wet;
(wet > 1.0) ? wet = 1.0;
(wet < 0.0) ? wet = 0.0;
(dry > 1.0) ? dry = 1.0;
(dry < 0.0) ? dry = 0.0;
//this reverb makes 50% full dry AND full wet, not crossfaded.
//that's so it can be on submixes without cutting back dry channel when adjusted:
//unless you go super heavy, you are only adjusting the added verb loudness.
  
delayI = 3407.0*size;
delayJ = 1823.0*size;
delayK = 859.0*size;
delayL = 331.0*size;
  
delayA = 4801.0*size;
delayB = 2909.0*size;
delayC = 1153.0*size;
delayD = 461.0*size;
  
delayE = 7607.0*size;
delayF = 4217.0*size;
delayG = 2269.0*size;
delayH = 1597.0*size;

@sample

inputSampleL = spl0;
inputSampleR = spl1;
(abs(inputSampleL)<const1) ? inputSampleL = fpdL * const2;
(abs(inputSampleR)<const1) ? inputSampleR = fpdR * const2;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

(abs(iirAL)<const3) ? iirAL = 0.0;
iirAL = (iirAL*(1.0-lowpass))+(inputSampleL*lowpass); inputSampleL = iirAL;
(abs(iirAR)<const3) ? iirAR = 0.0;
iirAR = (iirAR*(1.0-lowpass))+(inputSampleR*lowpass); inputSampleR = iirAR;
//initial filter

cycle+=1;
(cycle == cycleEnd) ? ( //hit the end point and we do a reverb sample
  feedbackAL = (feedbackAL*(1.0-interpolate))+(previousAL*interpolate); previousAL = feedbackAL;
  feedbackBL = (feedbackBL*(1.0-interpolate))+(previousBL*interpolate); previousBL = feedbackBL;
  feedbackCL = (feedbackCL*(1.0-interpolate))+(previousCL*interpolate); previousCL = feedbackCL;
  feedbackDL = (feedbackDL*(1.0-interpolate))+(previousDL*interpolate); previousDL = feedbackDL;
  feedbackAR = (feedbackAR*(1.0-interpolate))+(previousAR*interpolate); previousAR = feedbackAR;
  feedbackBR = (feedbackBR*(1.0-interpolate))+(previousBR*interpolate); previousBR = feedbackBR;
  feedbackCR = (feedbackCR*(1.0-interpolate))+(previousCR*interpolate); previousCR = feedbackCR;
  feedbackDR = (feedbackDR*(1.0-interpolate))+(previousDR*interpolate); previousDR = feedbackDR;
  
  thunderL = (thunderL*0.99)-(feedbackAL*thunderAmount);
  thunderR = (thunderR*0.99)-(feedbackAR*thunderAmount);
  
  aIL[countI] = inputSampleL + ((feedbackAL+thunderL) * regen);
  aJL[countJ] = inputSampleL + (feedbackBL * regen);
  aKL[countK] = inputSampleL + (feedbackCL * regen);
  aLL[countL] = inputSampleL + (feedbackDL * regen);
  aIR[countI] = inputSampleR + ((feedbackAR+thunderR) * regen);
  aJR[countJ] = inputSampleR + (feedbackBR * regen);
  aKR[countK] = inputSampleR + (feedbackCR * regen);
  aLR[countL] = inputSampleR + (feedbackDR * regen);
  
  countI+=1; (countI < 0 || countI > delayI) ? countI = 0;
  countJ+=1; (countJ < 0 || countJ > delayJ) ? countJ = 0;
  countK+=1; (countK < 0 || countK > delayK) ? countK = 0;
  countL+=1; (countL < 0 || countL > delayL) ? countL = 0;
  
  outIL = aIL[countI-((countI > delayI)?delayI+1:0)];
  outJL = aJL[countJ-((countJ > delayJ)?delayJ+1:0)];
  outKL = aKL[countK-((countK > delayK)?delayK+1:0)];
  outLL = aLL[countL-((countL > delayL)?delayL+1:0)];
  outIR = aIR[countI-((countI > delayI)?delayI+1:0)];
  outJR = aJR[countJ-((countJ > delayJ)?delayJ+1:0)];
  outKR = aKR[countK-((countK > delayK)?delayK+1:0)];
  outLR = aLR[countL-((countL > delayL)?delayL+1:0)];
  //first block: now we have four outputs
  
  aAL[countA] = (outIL - (outJL + outKL + outLL));
  aBL[countB] = (outJL - (outIL + outKL + outLL));
  aCL[countC] = (outKL - (outIL + outJL + outLL));
  aDL[countD] = (outLL - (outIL + outJL + outKL));
  aAR[countA] = (outIR - (outJR + outKR + outLR));
  aBR[countB] = (outJR - (outIR + outKR + outLR));
  aCR[countC] = (outKR - (outIR + outJR + outLR));
  aDR[countD] = (outLR - (outIR + outJR + outKR));
  
  countA+=1; (countA < 0 || countA > delayA) ? countA = 0;
  countB+=1; (countB < 0 || countB > delayB) ? countB = 0;
  countC+=1; (countC < 0 || countC > delayC) ? countC = 0;
  countD+=1; (countD < 0 || countD > delayD) ? countD = 0;
  
  outAL = aAL[countA-((countA > delayA)?delayA+1:0)];
  outBL = aBL[countB-((countB > delayB)?delayB+1:0)];
  outCL = aCL[countC-((countC > delayC)?delayC+1:0)];
  outDL = aDL[countD-((countD > delayD)?delayD+1:0)];
  outAR = aAR[countA-((countA > delayA)?delayA+1:0)];
  outBR = aBR[countB-((countB > delayB)?delayB+1:0)];
  outCR = aCR[countC-((countC > delayC)?delayC+1:0)];
  outDR = aDR[countD-((countD > delayD)?delayD+1:0)];
  //second block: four more outputs
  
  aEL[countE] = (outAL - (outBL + outCL + outDL));
  aFL[countF] = (outBL - (outAL + outCL + outDL));
  aGL[countG] = (outCL - (outAL + outBL + outDL));
  aHL[countH] = (outDL - (outAL + outBL + outCL));
  aER[countE] = (outAR - (outBR + outCR + outDR));
  aFR[countF] = (outBR - (outAR + outCR + outDR));
  aGR[countG] = (outCR - (outAR + outBR + outDR));
  aHR[countH] = (outDR - (outAR + outBR + outCR));
  
  countE+=1; (countE < 0 || countE > delayE) ? countE = 0;
  countF+=1; (countF < 0 || countF > delayF) ? countF = 0;
  countG+=1; (countG < 0 || countG > delayG) ? countG = 0;
  countH+=1; (countH < 0 || countH > delayH) ? countH = 0;
  
  outEL = aEL[countE-((countE > delayE)?delayE+1:0)];
  outFL = aFL[countF-((countF > delayF)?delayF+1:0)];
  outGL = aGL[countG-((countG > delayG)?delayG+1:0)];
  outHL = aHL[countH-((countH > delayH)?delayH+1:0)];
  outER = aER[countE-((countE > delayE)?delayE+1:0)];
  outFR = aFR[countF-((countF > delayF)?delayF+1:0)];
  outGR = aGR[countG-((countG > delayG)?delayG+1:0)];
  outHR = aHR[countH-((countH > delayH)?delayH+1:0)];
  //third block: final outputs
  
  feedbackAL = (outEL - (outFL + outGL + outHL));
  feedbackBL = (outFL - (outEL + outGL + outHL));
  feedbackCL = (outGL - (outEL + outFL + outHL));
  feedbackDL = (outHL - (outEL + outFL + outGL));
  feedbackAR = (outER - (outFR + outGR + outHR));
  feedbackBR = (outFR - (outER + outGR + outHR));
  feedbackCR = (outGR - (outER + outFR + outHR));
  feedbackDR = (outHR - (outER + outFR + outGR));
  //which we need to feed back into the input again, a bit
  
  inputSampleL = (outEL + outFL + outGL + outHL)/8.0;
  inputSampleR = (outER + outFR + outGR + outHR)/8.0;
  //and take the final combined sum of outputs
  (cycleEnd == 4) ? (
    lastRefL[0] = lastRefL[4]; //start from previous last
    lastRefL[2] = (lastRefL[0] + inputSampleL)/2; //half
    lastRefL[1] = (lastRefL[0] + lastRefL[2])/2; //one quarter
    lastRefL[3] = (lastRefL[2] + inputSampleL)/2; //three quarters
    lastRefL[4] = inputSampleL; //full
    lastRefR[0] = lastRefR[4]; //start from previous last
    lastRefR[2] = (lastRefR[0] + inputSampleR)/2; //half
    lastRefR[1] = (lastRefR[0] + lastRefR[2])/2; //one quarter
    lastRefR[3] = (lastRefR[2] + inputSampleR)/2; //three quarters
    lastRefR[4] = inputSampleR; //full
  );
  (cycleEnd == 3) ? (
    lastRefL[0] = lastRefL[3]; //start from previous last
    lastRefL[2] = (lastRefL[0]+lastRefL[0]+inputSampleL)/3; //third
    lastRefL[1] = (lastRefL[0]+inputSampleL+inputSampleL)/3; //two thirds
    lastRefL[3] = inputSampleL; //full
    lastRefR[0] = lastRefR[3]; //start from previous last
    lastRefR[2] = (lastRefR[0]+lastRefR[0]+inputSampleR)/3; //third
    lastRefR[1] = (lastRefR[0]+inputSampleR+inputSampleR)/3; //two thirds
    lastRefR[3] = inputSampleR; //full
  );
  (cycleEnd == 2) ? (
    lastRefL[0] = lastRefL[2]; //start from previous last
    lastRefL[1] = (lastRefL[0] + inputSampleL)/2; //half
    lastRefL[2] = inputSampleL; //full
    lastRefR[0] = lastRefR[2]; //start from previous last
    lastRefR[1] = (lastRefR[0] + inputSampleR)/2; //half
    lastRefR[2] = inputSampleR; //full
  );
  (cycleEnd == 1) ? (
    lastRefL[0] = inputSampleL;
    lastRefR[0] = inputSampleR;
  );
  cycle = 0; //reset
  inputSampleL = lastRefL[cycle];
  inputSampleR = lastRefR[cycle];
) : (
  inputSampleL = lastRefL[cycle];
  inputSampleR = lastRefR[cycle];
  //we are going through our references now
);

(abs(iirBL)<const3) ? iirBL = 0.0;
iirBL = (iirBL*(1.0-lowpass))+(inputSampleL*lowpass); inputSampleL = iirBL;
(abs(iirBR)<const3) ? iirBR = 0.0;
iirBR = (iirBR*(1.0-lowpass))+(inputSampleR*lowpass); inputSampleR = iirBR;
//end filter

(wet < 1.0) ? (inputSampleL *= wet; inputSampleR *= wet;);
(dry < 1.0) ? (drySampleL *= dry; drySampleR *= dry;);
inputSampleL += drySampleL;
inputSampleR += drySampleR;
//this is our submix verb dry/wet: 0.5 is BOTH at FULL VOLUME
//purpose is that, if you're adding verb, you're not altering other balances

//begin 64 bit stereo floating point dither
//int expon; frexp((double)inputSampleL, &expon);
fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
//inputSampleL += ((double(fpdL)-uint32_t(0x7fffffff)) * 1.1e-44l * pow(2,expon+62));
//frexp((double)inputSampleR, &expon);
fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
//inputSampleR += ((double(fpdR)-uint32_t(0x7fffffff)) * 1.1e-44l * pow(2,expon+62));
//end 64 bit stereo floating point dither
(fpdL < 0) ? fpdL = 0x80000000 + (fpdL & 0x7FFFFFFF);
(fpdR < 0) ? fpdR = 0x80000000 + (fpdR & 0x7FFFFFFF);

spl0 = inputSampleL;
spl1 = inputSampleR;

