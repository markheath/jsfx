desc:Airwindows Tape Delay 2 (Mark Heath)

// https://github.com/airwindows/airwindows/blob/master/plugins/WinVST/TapeDelay2/TapeDelay2Proc.cpp
// original code Copyright (c) 2016 airwindows, All rights reserved
// license: MIT
// version history:
// 0.1 12 May 2022 - initial port from GitHub commit 558b93e

//tags: delay
//author: Mark Heath

// https://www.airwindows.com/tapedelay2/

// default<min, max, increment>
slider1:1.0<0,1,0.01>Time
slider2:0.0<0,1,0.01>Regen
slider3:0.5<0,1,0.01>Freq
slider4:0.0<0,1,0.01>Reso
slider5:0.0<0,1,0.01>Flutter
slider6:1.0<0,1,0.01>Dry/Wet

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

overallscale = 1.0;
overallscale /= 44100.0;
overallscale *= srate;

A = 1.0;
B = 0.0;
C = 0.5;
D = 0.0;
E = 0.0;
F = 1.0;

freemem = 0;
dL = freemem; freemem+=88211;
regenFilterL = freemem; freemem+=9;
outFilterL = freemem; freemem+=9;
lastRefL = freemem; freemem+=10;
  
dR = freemem; freemem+=88211;
regenFilterR = freemem; freemem+=9;
outFilterR = freemem; freemem+=9;
lastRefR = freemem; freemem+=10;

x = 0; loop(88210, dL[x] = 0.0; dR[x] = 0.0; x+=1 );
prevSampleL = 0.0; delayL = 0.0; sweepL = 0.0;
prevSampleR = 0.0; delayR = 0.0; sweepR = 0.0;
x = 0; loop(9, 
  regenFilterL[x] = 0.0; outFilterL[x] = 0.0; lastRefL[x] = 0.0;
  regenFilterR[x] = 0.0; outFilterR[x] = 0.0; lastRefR[x] = 0.0;
  x+=1; );
cycle = 0;  

const1 = 1.18*10^-23; // 1.18e-23;
const2 = 1.18*10^-17; // 1.18e-17
const3 = 1.18*10^-37;
M_PI = 3.1415926535897932384626433;
UINT32_MAX = 4294967295;


// fpdL and fpdR are uint32_t
fpdL = 1.0; while (fpdL = rand()*UINT32_MAX; fpdL < 16386; );
fpdR = 1.0; while (fpdR = rand()*UINT32_MAX; fpdR < 16386; );
fpdL |= 0;
fpdR |= 0;
//this is reset: values being initialized only once. Startup values, whatever they are.

@slider
A = slider1;
B = slider2;
C = slider3;
D = slider4;
E = slider5;
F = slider6;
// argument list

@block
 
cycleEnd = floor(overallscale);
(cycleEnd < 1) ? cycleEnd = 1;
(cycleEnd > 4) ? cycleEnd = 4;
//this is going to be 2 for 88.1 or 96k, 3 for silly people, 4 for 176 or 192k
(cycle > cycleEnd-1) ? cycle = cycleEnd-1; //sanity check  
  
baseSpeed = (pow(A,4)*25.0)+1.0;
feedback = pow(B,2);
  
//[0] is frequency: 0.000001 to 0.499999 is near-zero to near-Nyquist
//[1] is resonance, 0.7071 is Butterworth. Also can't be zero
regenFilterL[0] = regenFilterR[0] = ((pow(C,3)*0.4)+0.0001);
regenFilterL[1] = regenFilterR[1] = pow(D,2)+0.01; //resonance
K = tan(M_PI * regenFilterR[0]);
norm = 1.0 / (1.0 + K / regenFilterR[1] + K * K);
regenFilterL[2] = regenFilterR[2] = K / regenFilterR[1] * norm;
regenFilterL[4] = regenFilterR[4] = -regenFilterR[2];
regenFilterL[5] = regenFilterR[5] = 2.0 * (K * K - 1.0) * norm;
regenFilterL[6] = regenFilterR[6] = (1.0 - K / regenFilterR[1] + K * K) * norm;
  
//[0] is frequency: 0.000001 to 0.499999 is near-zero to near-Nyquist
//[1] is resonance, 0.7071 is Butterworth. Also can't be zero
outFilterL[0] = outFilterR[0] = regenFilterR[0];
outFilterL[1] = outFilterR[1] = regenFilterR[1] * 1.618033988749894848204586; //resonance
K = tan(M_PI * outFilterR[0]);
norm = 1.0 / (1.0 + K / outFilterR[1] + K * K);
outFilterL[2] = outFilterR[2] = K / outFilterR[1] * norm;
outFilterL[4] = outFilterR[4] = -outFilterR[2];
outFilterL[5] = outFilterR[5] = 2.0 * (K * K - 1.0) * norm;
outFilterL[6] = outFilterR[6] = (1.0 - K / outFilterR[1] + K * K) * norm;
  
vibSpeed = pow(E,5) * baseSpeed * ((regenFilterR[0]*0.09)+0.025);//0.05
wet = F*2.0;
dry = 2.0 - wet;
(wet > 1.0) ? wet = 1.0;
(wet < 0.0) ? wet = 0.0;
(dry > 1.0) ? dry = 1.0;
(dry < 0.0) ? dry = 0.0;
//this echo makes 50% full dry AND full wet, not crossfaded.
//that's so it can be on submixes without cutting back dry channel when adjusted:
//unless you go super heavy, you are only adjusting the added echo loudness.

@sample

inputSampleL = spl0;
inputSampleR = spl1;
(abs(inputSampleL)<const1) ? inputSampleL = fpdL * const2;
(abs(inputSampleR)<const1) ? inputSampleR = fpdR * const2;

drySampleL = inputSampleL;
drySampleR = inputSampleR;

cycle+=1;
(cycle == cycleEnd) ? (
  speedL = baseSpeed + (vibSpeed * (sin(sweepL)+1.0));
  speedR = baseSpeed + (vibSpeed * (sin(sweepR)+1.0));
  sweepL += (0.05*inputSampleL*inputSampleL); (sweepL > 6.283185307179586) ? sweepL -= 6.283185307179586;
  sweepR += (0.05*inputSampleR*inputSampleR); (sweepR > 6.283185307179586) ? sweepR -= 6.283185307179586;
      
  //begin left channel
  pos = floor(delayL);
  newSample = inputSampleL + dL[pos]*feedback;
  tempSample = (newSample * regenFilterL[2]) + regenFilterL[7];
  regenFilterL[7] = -(tempSample * regenFilterL[5]) + regenFilterL[8];
  regenFilterL[8] = (newSample * regenFilterL[4]) - (tempSample * regenFilterL[6]);
  newSample = tempSample;
      
  delayL -= speedL; (delayL < 0) ? delayL += 88200.0;
  increment = (newSample - prevSampleL) / speedL;
  dL[pos] = prevSampleL;
  while (pos != floor(delayL)) (
    dL[pos] = prevSampleL;
    prevSampleL += increment;
    pos-=1; (pos < 0) ? pos += 88200;
  );
  prevSampleL = newSample;
  pos = floor(delayL); inputSampleL = dL[pos];
  tempSample = (inputSampleL * outFilterL[2]) + outFilterL[7];
  outFilterL[7] = -(tempSample * outFilterL[5]) + outFilterL[8];
  outFilterL[8] = (inputSampleL * outFilterL[4]) - (tempSample * outFilterL[6]);
  inputSampleL = tempSample;
  //end left channel
  //begin right channel
  pos = floor(delayR);
  newSample = inputSampleR + dR[pos]*feedback;
  tempSample = (newSample * regenFilterR[2]) + regenFilterR[7];
  regenFilterR[7] = -(tempSample * regenFilterR[5]) + regenFilterR[8];
  regenFilterR[8] = (newSample * regenFilterR[4]) - (tempSample * regenFilterR[6]);
  newSample = tempSample;
      
  delayR -= speedR; (delayR < 0) ? delayR += 88200.0;
  increment = (newSample - prevSampleR) / speedR;
  dR[pos] = prevSampleR;
  while (pos != floor(delayR)) (
    dR[pos] = prevSampleR;
    prevSampleR += increment;
    pos-=1; (pos < 0) ? pos += 88200;
  );
  prevSampleR = newSample;
  pos = floor(delayR); inputSampleR = dR[pos];
  tempSample = (inputSampleR * outFilterR[2]) + outFilterR[7];
  outFilterR[7] = -(tempSample * outFilterR[5]) + outFilterR[8];
  outFilterR[8] = (inputSampleR * outFilterR[4]) - (tempSample * outFilterR[6]);
  inputSampleR = tempSample;
  //end right channel
      
  (cycleEnd == 4) ? (
    lastRefL[0] = lastRefL[4]; //start from previous last
    lastRefL[2] = (lastRefL[0] + inputSampleL)/2; //half
    lastRefL[1] = (lastRefL[0] + lastRefL[2])/2; //one quarter
    lastRefL[3] = (lastRefL[2] + inputSampleL)/2; //three quarters
    lastRefL[4] = inputSampleL; //full
    lastRefR[0] = lastRefR[4]; //start from previous last
    lastRefR[2] = (lastRefR[0] + inputSampleR)/2; //half
    lastRefR[1] = (lastRefR[0] + lastRefR[2])/2; //one quarter
    lastRefR[3] = (lastRefR[2] + inputSampleR)/2; //three quarters
    lastRefR[4] = inputSampleR; //full
  );
  (cycleEnd == 3) ? (
    lastRefL[0] = lastRefL[3]; //start from previous last
    lastRefL[2] = (lastRefL[0]+lastRefL[0]+inputSampleL)/3; //third
    lastRefL[1] = (lastRefL[0]+inputSampleL+inputSampleL)/3; //two thirds
    lastRefL[3] = inputSampleL; //full
    lastRefR[0] = lastRefR[3]; //start from previous last
    lastRefR[2] = (lastRefR[0]+lastRefR[0]+inputSampleR)/3; //third
    lastRefR[1] = (lastRefR[0]+inputSampleR+inputSampleR)/3; //two thirds
    lastRefR[3] = inputSampleR; //full
  );
  (cycleEnd == 2) ? (
    lastRefL[0] = lastRefL[2]; //start from previous last
    lastRefL[1] = (lastRefL[0] + inputSampleL)/2; //half
    lastRefL[2] = inputSampleL; //full
    lastRefR[0] = lastRefR[2]; //start from previous last
    lastRefR[1] = (lastRefR[0] + inputSampleR)/2; //half
    lastRefR[2] = inputSampleR; //full
  );
  (cycleEnd == 1) ? (
    lastRefL[0] = inputSampleL;
    lastRefR[0] = inputSampleR;
  );
  cycle = 0; //reset
  inputSampleL = lastRefL[cycle];
  inputSampleR = lastRefR[cycle];
) : (
  inputSampleL = lastRefL[cycle];
  inputSampleR = lastRefR[cycle];
  //we are going through our references now
);

// was a switch with no break
//multi-pole average using lastRef[] variables
(cycleEnd == 4) ? (
  lastRefL[8] = inputSampleL; inputSampleL = (inputSampleL+lastRefL[7])*0.5;
  lastRefL[7] = lastRefL[8]; //continue, do not break
  lastRefR[8] = inputSampleR; inputSampleR = (inputSampleR+lastRefR[7])*0.5;
  lastRefR[7] = lastRefR[8]; //continue, do not break
);
(cycleEnd >= 3) ? (
  lastRefL[8] = inputSampleL; inputSampleL = (inputSampleL+lastRefL[6])*0.5;
  lastRefL[6] = lastRefL[8]; //continue, do not break
  lastRefR[8] = inputSampleR; inputSampleR = (inputSampleR+lastRefR[6])*0.5;
  lastRefR[6] = lastRefR[8]; //continue, do not break
);
(cycleEnd >= 2) ? (
  lastRefL[8] = inputSampleL; inputSampleL = (inputSampleL+lastRefL[5])*0.5;
  lastRefL[5] = lastRefL[8]; //continue, do not break
  lastRefR[8] = inputSampleR; inputSampleR = (inputSampleR+lastRefR[5])*0.5;
  lastRefR[5] = lastRefR[8]; //continue, do not break
);
// case 1://no further averaging
  
    
(wet < 1.0) ? (inputSampleL *= wet; inputSampleR *= wet;);
(dry < 1.0) ? (drySampleL *= dry; drySampleR *= dry;);
inputSampleL += drySampleL; inputSampleR += drySampleR;


//begin 64 bit stereo floating point dither
//int expon; frexp((double)inputSampleL, &expon);
fpdL ~= fpdL << 13; fpdL ~= fpdL >> 17; fpdL ~= fpdL << 5;
//inputSampleL += ((double(fpdL)-uint32_t(0x7fffffff)) * 1.1e-44l * pow(2,expon+62));
//frexp((double)inputSampleR, &expon);
fpdR ~= fpdR << 13; fpdR ~= fpdR >> 17; fpdR ~= fpdR << 5;
//inputSampleR += ((double(fpdR)-uint32_t(0x7fffffff)) * 1.1e-44l * pow(2,expon+62));
//end 64 bit stereo floating point dither
(fpdL < 0) ? fpdL = 0x80000000 + (fpdL & 0x7FFFFFFF);
(fpdR < 0) ? fpdR = 0x80000000 + (fpdR & 0x7FFFFFFF);

spl0 = inputSampleL;
spl1 = inputSampleR;

